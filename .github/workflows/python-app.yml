name: AI Orchestration System CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Check import sorting with isort
      run: |
        isort . --check-only --diff
        
    - name: Check code formatting with black
      run: |
        black . --check --diff
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # treat all other issues as warnings
        flake8 . --count --exit-zero --statistics
        
    - name: Run tests with pytest
      run: |
        # Run tests without requiring actual models/ollama
        pytest tests/ -v --tb=short
        
    - name: Test import structure
      run: |
        # Verify core modules can be imported (without requiring ollama/models)
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Test core imports that don't require external services
        try:
            from orchestration.core.pool.model_pool import ModelPool
            from orchestration.core.router.model_router import ModelRouter
            print('✅ Core orchestration imports successful')
        except ImportError as e:
            print(f'❌ Core import failed: {e}')
            sys.exit(1)
            
        try:
            from rag.ingestion.document_processor import DocumentProcessor
            print('✅ RAG components import successful') 
        except ImportError as e:
            print(f'❌ RAG import failed: {e}')
            sys.exit(1)
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
        
    - name: Run development tools check
      run: |
        echo "Checking code quality..."
        python -c "
        import subprocess
        import sys
        
        def run_check(cmd, name):
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                print(f'❌ {name} failed:')
                print(result.stdout)
                print(result.stderr)
                return False
            print(f'✅ {name} passed')
            return True
        
        checks = [
            ('isort . --check-only', 'Import sorting'),
            ('black . --check', 'Code formatting'),  
            ('flake8 . --statistics', 'Code linting')
        ]
        
        all_passed = all(run_check(cmd, name) for cmd, name in checks)
        
        if not all_passed:
            print('Code quality checks failed!')
            sys.exit(1)
        print('All code quality checks passed!')
        "